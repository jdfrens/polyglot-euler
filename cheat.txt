Haskel
------
  CamelCase
  -- comment
  Assertion:
    assertEqual "GPF of 2" 2 (greatestPrimeFactor 2)
    2 @=? greatestPrimeFactor 2
  Notation:
    Range of numbers: [x..y]
  Important modules:
    Data.List
  Functions:
    maximum :: List a -> a

Erlang
------
  CamelCase or _ --- my choice?
  % comment
  Assertion:
    ?_assertEqual(2, greatest_prime_factor(2))
  Important modules:
    lists
  Functions:
    lists:seq(X, Y)       % range of integers
    lists:maximum(A, B)
    div                   % for integer division
    rem                   % for remainder

Python
------
  CamelCase for classes; underscores for variables, functions, methods
  Assertions:
    self.assertEqual(2, gpf(2))
    self.assertTrue(is_palindrome(9))
  Access a Library:
		import numbers
  Functions:
    range(n, m)       % range of integers
    //                % for integer division (Python 3.1)
		%                 % modulus
    
Prolog
------
  underscores
  assertions:
    test(greatest_prime_factor1) :-
	  greatest_prime_factor1(2, 2).
  integer -> string:
    name(300, S)
  string -> integer:
    name(X, "foobar")
